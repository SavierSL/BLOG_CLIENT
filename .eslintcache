[{"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\index.tsx":"1","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\App.tsx":"2","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\FrontPage.tsx":"3","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\rootReducers.ts":"4","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\store.ts":"5","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\sagas\\sagas.ts":"6","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\types.ts":"7","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\logIn.ts":"8","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\post.ts":"9","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\RegisterPage.tsx":"10","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\register.ts":"11","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\HomePage.tsx":"12","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\light.ts":"13","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\styles.ts":"14","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\dark.ts":"15","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\types.ts":"16","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\alert\\Alert.tsx":"17","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\getTheme.ts":"18","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\alert.ts":"19","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\index.ts":"20","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\blogPost.ts":"21","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\BlogPosts.tsx":"22","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\blogPosts.ts":"23","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\users.ts":"24","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\user.ts":"25","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\blogPost.tsx":"26","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\UserPost.tsx":"27","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\loader.tsx":"28","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Nav.tsx":"29","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Footer.tsx":"30","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\formLoader.tsx":"31"},{"size":229,"mtime":1611572734403,"results":"32","hashOfConfig":"33"},{"size":1879,"mtime":1612452988073,"results":"34","hashOfConfig":"33"},{"size":2962,"mtime":1612423934019,"results":"35","hashOfConfig":"33"},{"size":262,"mtime":1611983274553,"results":"36","hashOfConfig":"33"},{"size":520,"mtime":1611313811890,"results":"37","hashOfConfig":"33"},{"size":10490,"mtime":1612533028244,"results":"38","hashOfConfig":"33"},{"size":1993,"mtime":1612532058956,"results":"39","hashOfConfig":"33"},{"size":297,"mtime":1611314361495,"results":"40","hashOfConfig":"33"},{"size":1585,"mtime":1612357742737,"results":"41","hashOfConfig":"33"},{"size":3733,"mtime":1612423958186,"results":"42","hashOfConfig":"33"},{"size":237,"mtime":1611555814741,"results":"43","hashOfConfig":"33"},{"size":10079,"mtime":1612534816788,"results":"44","hashOfConfig":"33"},{"size":188,"mtime":1612362076815,"results":"45","hashOfConfig":"33"},{"size":370,"mtime":1612456608779,"results":"46","hashOfConfig":"33"},{"size":239,"mtime":1612278180488,"results":"47","hashOfConfig":"33"},{"size":65,"mtime":1611587269005,"results":"48","hashOfConfig":"33"},{"size":506,"mtime":1611749758928,"results":"49","hashOfConfig":"33"},{"size":290,"mtime":1612177058538,"results":"50","hashOfConfig":"33"},{"size":187,"mtime":1611640997684,"results":"51","hashOfConfig":"33"},{"size":85,"mtime":1611586625214,"results":"52","hashOfConfig":"33"},{"size":629,"mtime":1612269890218,"results":"53","hashOfConfig":"33"},{"size":2034,"mtime":1612500423943,"results":"54","hashOfConfig":"33"},{"size":909,"mtime":1612532618853,"results":"55","hashOfConfig":"33"},{"size":1092,"mtime":1612533403526,"results":"56","hashOfConfig":"33"},{"size":2095,"mtime":1612532566100,"results":"57","hashOfConfig":"33"},{"size":1443,"mtime":1612505178707,"results":"58","hashOfConfig":"33"},{"size":2140,"mtime":1612456271825,"results":"59","hashOfConfig":"33"},{"size":259,"mtime":1612262069390,"results":"60","hashOfConfig":"33"},{"size":1630,"mtime":1612501211105,"results":"61","hashOfConfig":"33"},{"size":194,"mtime":1612452821401,"results":"62","hashOfConfig":"33"},{"size":152,"mtime":1612531377941,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"qf0wnc",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\index.tsx",[],["138","139"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\App.tsx",[],["140","141"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\FrontPage.tsx",["142"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logInAction } from \"../redux/actions/logIn\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport Alert from \"./alert/Alert\";\r\nimport { removeAlertAction } from \"../redux/actions/alert\";\r\nimport { getAllPost } from \"../redux/actions/blogPost\";\r\n\r\nexport interface FrontPageProps {\r\n  theme: any;\r\n}\r\ninterface logInState {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst FrontPage: React.FC<FrontPageProps> = ({ theme }) => {\r\n  const error = useSelector((state: any) => state.post.msg);\r\n  const isAuth = useSelector((state: any) => state.post.isAuth);\r\n  console.log(theme);\r\n  const [logInInput, setLogInInput] = useState<logInState>({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  useEffect(() => {\r\n    dispatch(getAllPost());\r\n  }, []);\r\n  const dispatch = useDispatch();\r\n  const handleInput = (e: any) => {\r\n    e.preventDefault();\r\n    dispatch(removeAlertAction());\r\n    setLogInInput({ ...logInInput, [e.target.name]: e.target.value });\r\n  };\r\n  const { email, password } = logInInput;\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"submitted\");\r\n    dispatch(logInAction(email, password));\r\n  };\r\n  console.log(logInInput);\r\n  if (isAuth === true) {\r\n    return <Redirect to=\"/home\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"frontPageContainer\">\r\n        <div className=\"frontPage\">\r\n          <div className=\"frontPage_content\">\r\n            <h1 className=\"primary-heading\">\r\n              BLOG <span style={{ color: \"#00aeef\" }}>IT</span>\r\n            </h1>\r\n            <div className=\"frontPage_form\">\r\n              <Alert error={error} />\r\n              <form\r\n                className=\"primary-form\"\r\n                action=\"\"\r\n                onSubmit={(e) => handleSubmit(e)}\r\n              >\r\n                <input\r\n                  className=\"primary-form_primary-input\"\r\n                  placeholder=\"email\"\r\n                  onChange={(e) => handleInput(e)}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  value={logInInput.email}\r\n                />\r\n                <input\r\n                  className=\"primary-form_primary-input\"\r\n                  placeholder=\"password\"\r\n                  onChange={(e) => handleInput(e)}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={logInInput.password}\r\n                />\r\n                <button className=\"primary-form_primary-button\">LOG IN</button>\r\n              </form>\r\n              <h2>\r\n                <span>You still don't have an account?</span>{\" \"}\r\n                <NavLink to=\"/register\" style={{ color: \"#00aeef\" }}>\r\n                  Register\r\n                </NavLink>\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\rootReducers.ts",[],["143","144"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\store.ts",[],["145","146"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\sagas\\sagas.ts",["147","148"],"import { all, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport { StringDecoder } from \"string_decoder\";\r\nimport * as type from \"../actions/types\";\r\n// const port = \"https://mearnstacksavierslblogapp.herokuapp.com\";\r\nconst port = \"http://localhost:5000\";\r\n//login\r\nconst logInData = async (email: string, password: string) => {\r\n  const body = { email, password };\r\n  console.log(body);\r\n  const token = await fetch(`${port}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  })\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  return token;\r\n};\r\nfunction* logInSaga(action: any) {\r\n  const { email, password } = action.payload;\r\n  try {\r\n    const res = yield logInData(email, password);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.LOG_IN_FAILED, payload: res });\r\n    }\r\n    console.log(res);\r\n    return yield put({ type: type.LOG_IN_SUCCESS, payload: res.token });\r\n  } catch (error) {\r\n    yield put({ type: type.LOG_IN_FAILED, payload: error });\r\n  }\r\n}\r\n\r\nfunction* watchLogInSaga() {\r\n  yield takeEvery(type.LOG_IN_SAGA, logInSaga);\r\n}\r\n\r\n//register\r\nconst registerData = async (name: string, email: string, password: string) => {\r\n  const body = { name, email, password };\r\n  const content = {\r\n    method: \"POST\",\r\n    headers: { \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  };\r\n  const token = await fetch(`${port}/users/register`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(token);\r\n  return token;\r\n};\r\nfunction* registerDataSaga(action: any) {\r\n  const { name, email, password } = action.payload;\r\n  try {\r\n    const res = yield registerData(name, email, password);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.REGISTER_FAILED, payload: res });\r\n    }\r\n    return yield put({ type: type.REGISTER_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.REGISTER_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchrRgisterDataSaga() {\r\n  yield takeEvery(type.REGISTER_SAGA, registerDataSaga);\r\n}\r\n\r\n//BLOG POST\r\nconst blogPostData = async (\r\n  title: string,\r\n  blogContent: string,\r\n  img: File,\r\n  token: string,\r\n  imgType: string\r\n) => {\r\n  console.log(img);\r\n  const body = { title, blogContent, img, imgType };\r\n  const content = {\r\n    method: \"POST\",\r\n    headers: { \"x-auth-token\": token, \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  };\r\n  const data = await fetch(`${port}/post/blog-post`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(data);\r\n  return data;\r\n};\r\nfunction* blogPostSaga(action: any) {\r\n  const { title, blogContent, img, token, imgType } = action.payload;\r\n  try {\r\n    const res = yield blogPostData(title, blogContent, img, token, imgType);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.BLOGPOST_FAILED, payload: res });\r\n    }\r\n\r\n    const ecodeDataToImage = () => {\r\n      if (res) {\r\n        const converToBase64 = (img: any) => {\r\n          const buffit = Buffer.from(img);\r\n          res.image = `${buffit}`;\r\n        };\r\n        converToBase64(res.img);\r\n      }\r\n    };\r\n    ecodeDataToImage();\r\n    yield put({ type: type.NEW_USER_POST_SUCCESS, payload: res });\r\n    return yield put({ type: type.BLOGPOST_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.BLOGPOST_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchBlogPostSaga() {\r\n  yield takeEvery(type.BLOGPOST_SAGA, blogPostSaga);\r\n}\r\n\r\n// //NEW USER POST\r\n// function* newUserPost(action: any) {\r\n//   const { blogPost } = action.payload;\r\n\r\n//   try {\r\n//     yield put({ type: type.NEW_USER_POST_SUCCESS, payload: blogPost });\r\n//   } catch (error) {\r\n//     yield put({ type: type.NEW_USER_POST_FAILED, payload: error });\r\n//   }\r\n// }\r\n// function* watchNewUserPostSaga() {\r\n//   yield takeEvery(type.NEW_USER_POST_SAGA, newUserPost);\r\n// }\r\n\r\n//GET ALL POST\r\nconst getAllPost = async () => {\r\n  const content = { method: \"GET\" };\r\n  const data = await fetch(`${port}/post/blog-posts`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getAllPostSaga() {\r\n  try {\r\n    const res = yield getAllPost();\r\n    let newPosts: any[] = [];\r\n    const encodeDataToImage = () => {\r\n      newPosts = res.map((post: any) => {\r\n        if (res.length !== 0) {\r\n          const convertToBase64 = (image: any) => {\r\n            const buffit = Buffer.from(image);\r\n            post.image = `${buffit}`;\r\n          };\r\n          convertToBase64(post.img.data);\r\n          return post;\r\n        }\r\n      });\r\n    };\r\n    encodeDataToImage();\r\n\r\n    return yield put({ type: type.GET_ALL_POST_SUCCESS, payload: newPosts });\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\nfunction* watchGetAllPostSaga() {\r\n  yield takeLatest(type.GET_ALL_POST_SAGA, getAllPostSaga);\r\n}\r\n\r\nconst getUserData = async (token: string) => {\r\n  const content = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/users/get-user`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\n\r\nfunction* getUserSaga(action: any) {\r\n  const { token } = action.payload;\r\n  console.log(token);\r\n  try {\r\n    const res = yield getUserData(token);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_FAILED, payload: res });\r\n    }\r\n    return yield put({ type: type.GET_USER_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.GET_USER_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchGetUserSaga() {\r\n  yield takeEvery(type.GET_USER_SAGA, getUserSaga);\r\n}\r\n\r\nfunction* removeAlertSaga() {\r\n  yield put({ type: type.ALERT_SAGA_REMOVE });\r\n}\r\nfunction* watchRemoveAlertSaga() {\r\n  yield takeEvery(type.ALERT_SAGA, removeAlertSaga);\r\n}\r\n\r\n//GET USER POSTS\r\nconst getUserPosts = async (token: string) => {\r\n  const content = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/users/user-posts`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getUserPostsSaga(action: any) {\r\n  const { token } = action.payload;\r\n  try {\r\n    const res = yield getUserPosts(token);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_POSTS_FAILED, payload: res });\r\n    }\r\n    // let newPosts: any[] = [];\r\n    // const encodeDataToImage = () => {\r\n    //   newPosts = res.map((post: any) => {\r\n    //     if (res.length !== 0) {\r\n    //       const convertToBase64 = (image: any) => {\r\n    //         const buffit = Buffer.from(image);\r\n    //         post.image = `${buffit}`;\r\n    //       };\r\n    //       convertToBase64(post.img.data);\r\n    //       return post;\r\n    //     }\r\n    //   });\r\n    // };\r\n    // encodeDataToImage();\r\n    yield put({ type: type.GET_USER_POSTS_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.GET_USER_POSTS_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchGetUserPostsSaga() {\r\n  yield takeEvery(type.GET_USER_POSTS_SAGA, getUserPostsSaga);\r\n}\r\n\r\n//GET USER POST\r\nconst getPost = async (id: string) => {\r\n  const content = { method: \"GET\" };\r\n  const data = await fetch(`${port}/post/blog-posts/${id}`, content)\r\n    .then(async (res) => {\r\n      const data = res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getPostSaga(action: any) {\r\n  const { id } = action.payload;\r\n  try {\r\n    const res = yield getPost(id);\r\n    yield put({ type: type.POST_LINK_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.POST_LINK_SUCCESS, payload: error });\r\n  }\r\n}\r\nfunction* watchGetPostSaga() {\r\n  yield takeEvery(type.POST_LINK_SAGA, getPostSaga);\r\n}\r\n\r\n//exit post\r\nfunction* exitUserPostSaga() {\r\n  yield put({ type: type.EXIT_USER_POST_SUCESS });\r\n}\r\nfunction* watchExitUserPostSaga() {\r\n  yield takeEvery(type.EXIT_USER_POST_SAGA, exitUserPostSaga);\r\n}\r\n\r\n//LOG OUT\r\nfunction* logOutSaga() {\r\n  try {\r\n    yield put({ type: type.LOG_OUT_SUCCESS });\r\n  } catch (error) {\r\n    yield put({ type: type.LOG_OUT_FAILED });\r\n  }\r\n}\r\nfunction* watchLogOutSaga() {\r\n  yield takeEvery(type.LOG_OUT_SAGA, logOutSaga);\r\n}\r\n//DELETE POST\r\nconst deleteUserPost = async (token: string, postID: string) => {\r\n  const content = {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/post/blog-post/${postID}`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* deleteUserPostSaga(action: any) {\r\n  const { postID, token } = action.payload;\r\n  try {\r\n    const res = yield deleteUserPost(token, postID);\r\n    console.log(res);\r\n\r\n    yield put({ type: type.DELETE_POST_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.DELETE_POST_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchDeleteUserPostSaga() {\r\n  yield takeEvery(type.DELETE_POST_SAGA, deleteUserPostSaga);\r\n}\r\n\r\n//REFRESH\r\nfunction* refreshSaga() {\r\n  try {\r\n    yield put({ type: type.REFRESH_SUCCESS });\r\n  } catch (error) {\r\n    yield put({ type: type.REFRESH_FAILED });\r\n  }\r\n}\r\nfunction* watchRefreshSaga() {\r\n  yield takeEvery(type.REFRESH_SAGA, refreshSaga);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchLogInSaga(),\r\n    watchrRgisterDataSaga(),\r\n    watchRemoveAlertSaga(),\r\n    watchBlogPostSaga(),\r\n    watchGetAllPostSaga(),\r\n    watchGetUserSaga(),\r\n    watchGetUserPostsSaga(),\r\n    watchGetPostSaga(),\r\n    watchExitUserPostSaga(),\r\n    watchLogOutSaga(),\r\n    watchDeleteUserPostSaga(),\r\n    watchRefreshSaga(),\r\n  ]);\r\n}\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\types.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\logIn.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\post.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\RegisterPage.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\register.ts",[],["149","150"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\HomePage.tsx",["151","152","153","154"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\light.ts",[],["155","156"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\styles.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\dark.ts",["157"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\types.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\alert\\Alert.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\getTheme.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\alert.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\index.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\blogPost.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\BlogPosts.tsx",["158","159","160","161","162","163"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAllPost } from \"../redux/actions/blogPost\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport blogPost from \"../redux/reducers/blogPosts\";\r\nimport BlogPost from \"./mincomponents/blogPost\";\r\nimport Loader from \"./mincomponents/loader\";\r\n\r\nexport interface BlogPostsProps {}\r\n\r\nconst BlogPosts: React.FC<BlogPostsProps> = () => {\r\n  const blogPosts = useSelector((state: any) => state.blogPost.posts);\r\n  const loading = useSelector((state: any) => state.blogPost.loading);\r\n  const token = useSelector((state: any) => state.post.token);\r\n\r\n  const posts = [...blogPosts];\r\n  const dispatch = useDispatch();\r\n\r\n  console.log(posts);\r\n  console.log(\"1\");\r\n  useEffect(() => {\r\n    if (loading === true) dispatch(getAllPost());\r\n    console.log(\"2\");\r\n  }, []);\r\n  // const encodeDataToImage = () => {\r\n  //   newPosts = posts.map((post: any) => {\r\n  //     if (posts.length !== 0) {\r\n  //       const convertToBase64 = (image: any) => {\r\n  //         const buffit = Buffer.from(image);\r\n  //         post.image = `${buffit}`;\r\n  //       };\r\n  //       convertToBase64(post.img.data);\r\n  //       return post;\r\n  //     }\r\n  //   });\r\n  // };\r\n  // encodeDataToImage();\r\n  // console.log(newPosts);\r\n  console.log(\"3\");\r\n  //   if (blogPosts.length === 1) {\r\n  //     const convertToBase64 = (image: any) => {\r\n  //       const buffit = Buffer.from(image.img.data);\r\n  //       updatedImage = `${buffit}`;\r\n  //     };\r\n  //     convertToBase64(blogPosts[0]);\r\n  //   }\r\n  const postsContents = loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <div className=\"blogPostsContainer\">\r\n      <h1>Blog Posts</h1>\r\n   \r\n      <div className=\"blogContentContainer\">\r\n        {posts.length !== 0\r\n          ? posts.map((post: any) => {\r\n              return <BlogPost post={post} />;\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return <>{postsContents}</>;\r\n};\r\n\r\nexport default BlogPosts;\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\blogPosts.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\users.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\user.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\blogPost.tsx",["164","165","166","167"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { getUserPost } from \"../../redux/actions/blogPost\";\r\n\r\nexport interface BlogPostProps {\r\n  post: any;\r\n}\r\n\r\nconst BlogPost: React.FC<BlogPostProps> = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const [clickLink, setClickLink] = useState(false);\r\n  console.log(post._id);\r\n\r\n  const handleBlogLink = (e: any, id: string) => {\r\n    e.preventDefault();\r\n    setClickLink(true);\r\n    console.log(clickLink);\r\n  };\r\n  if (clickLink) {\r\n    return <Redirect to={`user-post/${post._id}`} />;\r\n  }\r\n  return (\r\n    <div\r\n      onClick={(e) => {\r\n        handleBlogLink(e, post._id);\r\n      }}\r\n      className=\"blogContentContainer-content\"\r\n    >\r\n      <div className=\"blogContentContainer-content-box\">\r\n        <div className=\"blogContentContainer-content-box-color\"></div>\r\n        <div className=\"blogContentContainer-content-box-details\">\r\n          <h1 className=\"blogContentContainer-content-box-details-txt\">\r\n            {`${post.name}'s blog`}\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <img\r\n        className=\"blogContentContainer-content-image\"\r\n        src={post.image}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"blogContentContainer-content-details\">\r\n        <h1>{post.title}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogPost;\r\n",["168","169"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\UserPost.tsx",["170","171"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { getUserPost } from \"../redux/actions/blogPost\";\r\nimport { exitUserPost } from \"../redux/actions/users\";\r\nimport Loader from \"./mincomponents/loader\";\r\n\r\nexport interface UserPostProps {\r\n  props: any;\r\n}\r\n\r\nconst UserPost: React.FC<UserPostProps> = ({ props }) => {\r\n  const postID = props.match.params.params_id;\r\n  const post = useSelector((state: any) => state.user.post);\r\n  const loading = useSelector((state: any) => state.user.loading);\r\n  const [exit, setExit] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserPost(postID));\r\n  }, []);\r\n  const ecodeDataToImage = () => {\r\n    if (post) {\r\n      const converToBase64 = (img: any) => {\r\n        const buffit = Buffer.from(img);\r\n        post.image = `${buffit}`;\r\n      };\r\n      converToBase64(post.img);\r\n    }\r\n  };\r\n  ecodeDataToImage();\r\n  const handleExit = (e: any) => {\r\n    e.preventDefault();\r\n    dispatch(exitUserPost());\r\n    setExit(true);\r\n  };\r\n  if (exit) {\r\n    return <Redirect to=\"/blog-posts\" />;\r\n  }\r\n  const blogPostContent = loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <div className=\"userPostContainer\">\r\n      <button className=\"primary-button\" onClick={(e) => handleExit(e)}>\r\n        BACK\r\n      </button>\r\n      <div className=\"userPostContainer__userBlogPost\">\r\n        <h1 className=\"userPostContainer__userBlogPost-title\">\r\n          {post && post.title}\r\n        </h1>\r\n        <p>{post && post.name}</p>\r\n        <p>{post && post.date}</p>\r\n        <div className=\"userPostContainer__userBlogPost-imageContainer\">\r\n          <img\r\n            className=\"userPostContainer__userBlogPost-imageContainer-image\"\r\n            src={post !== null ? post.image : \"\"}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n\r\n        <p className=\"userPostContainer__userBlogPost-content\">\r\n          {post && post.blogContent}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n  return <>{blogPostContent}</>;\r\n};\r\n\r\nexport default UserPost;\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\loader.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Nav.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Footer.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\formLoader.tsx",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"172","replacedBy":"176"},{"ruleId":"174","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":27,"column":6,"nodeType":"180","endLine":27,"endColumn":8,"suggestions":"181"},{"ruleId":"172","replacedBy":"182"},{"ruleId":"174","replacedBy":"183"},{"ruleId":"172","replacedBy":"184"},{"ruleId":"174","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":2,"column":10,"nodeType":"188","messageId":"189","endLine":2,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":166,"column":38,"nodeType":"192","messageId":"193","endLine":166,"endColumn":40},{"ruleId":"172","replacedBy":"194"},{"ruleId":"174","replacedBy":"195"},{"ruleId":"186","severity":1,"message":"196","line":12,"column":26,"nodeType":"188","messageId":"189","endLine":12,"endColumn":36},{"ruleId":"186","severity":1,"message":"197","line":13,"column":10,"nodeType":"188","messageId":"189","endLine":13,"endColumn":17},{"ruleId":"186","severity":1,"message":"198","line":20,"column":3,"nodeType":"188","messageId":"189","endLine":20,"endColumn":20},{"ruleId":"186","severity":1,"message":"199","line":24,"column":10,"nodeType":"188","messageId":"189","endLine":24,"endColumn":18},{"ruleId":"172","replacedBy":"200"},{"ruleId":"174","replacedBy":"201"},{"ruleId":"186","severity":1,"message":"202","line":1,"column":10,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"203","line":1,"column":28,"nodeType":"188","messageId":"189","endLine":1,"endColumn":36},{"ruleId":"186","severity":1,"message":"197","line":4,"column":10,"nodeType":"188","messageId":"189","endLine":4,"endColumn":17},{"ruleId":"186","severity":1,"message":"204","line":4,"column":19,"nodeType":"188","messageId":"189","endLine":4,"endColumn":27},{"ruleId":"186","severity":1,"message":"205","line":5,"column":8,"nodeType":"188","messageId":"189","endLine":5,"endColumn":16},{"ruleId":"186","severity":1,"message":"206","line":14,"column":9,"nodeType":"188","messageId":"189","endLine":14,"endColumn":14},{"ruleId":"178","severity":1,"message":"207","line":24,"column":6,"nodeType":"180","endLine":24,"endColumn":8,"suggestions":"208"},{"ruleId":"186","severity":1,"message":"209","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"197","line":3,"column":10,"nodeType":"188","messageId":"189","endLine":3,"endColumn":17},{"ruleId":"186","severity":1,"message":"210","line":4,"column":10,"nodeType":"188","messageId":"189","endLine":4,"endColumn":21},{"ruleId":"186","severity":1,"message":"211","line":11,"column":9,"nodeType":"188","messageId":"189","endLine":11,"endColumn":17},{"ruleId":"172","replacedBy":"212"},{"ruleId":"174","replacedBy":"213"},{"ruleId":"186","severity":1,"message":"197","line":3,"column":10,"nodeType":"188","messageId":"189","endLine":3,"endColumn":17},{"ruleId":"178","severity":1,"message":"214","line":21,"column":6,"nodeType":"180","endLine":21,"endColumn":8,"suggestions":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],["216"],["217"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["218"],["216"],["217"],["216"],["217"],"@typescript-eslint/no-unused-vars","'StringDecoder' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["216"],["217"],"'getAllPost' is defined but never used.","'NavLink' is defined but never used.","'newPostUserAction' is defined but never used.","'truncate' is defined but never used.",["216"],["217"],"'isWhiteSpaceLike' is defined but never used.","'useState' is defined but never used.","'Redirect' is defined but never used.","'blogPost' is defined but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'loading'. Either include them or remove the dependency array.",["219"],"'useEffect' is defined but never used.","'getUserPost' is defined but never used.","'dispatch' is assigned a value but never used.",["216"],["217"],"React Hook useEffect has missing dependencies: 'dispatch' and 'postID'. Either include them or remove the dependency array.",["220"],"no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [dispatch]",{"range":"227","text":"228"},"Update the dependencies array to be: [dispatch, loading]",{"range":"229","text":"230"},"Update the dependencies array to be: [dispatch, postID]",{"range":"231","text":"232"},[869,871],"[dispatch]",[888,890],"[dispatch, loading]",[762,764],"[dispatch, postID]"]