[{"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\index.tsx":"1","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\App.tsx":"2","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\FrontPage.tsx":"3","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\rootReducers.ts":"4","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\store.ts":"5","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\sagas\\sagas.ts":"6","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\types.ts":"7","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\logIn.ts":"8","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\post.ts":"9","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\RegisterPage.tsx":"10","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\register.ts":"11","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\HomePage.tsx":"12","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\light.ts":"13","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\styles.ts":"14","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\dark.ts":"15","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\types.ts":"16","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\alert\\Alert.tsx":"17","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\getTheme.ts":"18","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\alert.ts":"19","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\index.ts":"20","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\blogPost.ts":"21","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\BlogPosts.tsx":"22","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\blogPosts.ts":"23","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\users.ts":"24","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\user.ts":"25","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\blogPost.tsx":"26","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\UserPost.tsx":"27","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\loader.tsx":"28","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Nav.tsx":"29","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Footer.tsx":"30","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\formLoader.tsx":"31","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\userPost.tsx":"32","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\editPost.tsx":"33"},{"size":229,"mtime":1611572734403,"results":"34","hashOfConfig":"35"},{"size":1970,"mtime":1612762176752,"results":"36","hashOfConfig":"35"},{"size":2972,"mtime":1612698331530,"results":"37","hashOfConfig":"35"},{"size":262,"mtime":1611983274553,"results":"38","hashOfConfig":"35"},{"size":520,"mtime":1612708287462,"results":"39","hashOfConfig":"35"},{"size":11442,"mtime":1612770646050,"results":"40","hashOfConfig":"35"},{"size":2152,"mtime":1612769258585,"results":"41","hashOfConfig":"35"},{"size":297,"mtime":1611314361495,"results":"42","hashOfConfig":"35"},{"size":1585,"mtime":1612357742737,"results":"43","hashOfConfig":"35"},{"size":3733,"mtime":1612423958186,"results":"44","hashOfConfig":"35"},{"size":237,"mtime":1611555814741,"results":"45","hashOfConfig":"35"},{"size":9529,"mtime":1612773410385,"results":"46","hashOfConfig":"35"},{"size":188,"mtime":1612362076815,"results":"47","hashOfConfig":"35"},{"size":370,"mtime":1612456608779,"results":"48","hashOfConfig":"35"},{"size":189,"mtime":1612698453925,"results":"49","hashOfConfig":"35"},{"size":65,"mtime":1611587269005,"results":"50","hashOfConfig":"35"},{"size":506,"mtime":1611749758928,"results":"51","hashOfConfig":"35"},{"size":290,"mtime":1612177058538,"results":"52","hashOfConfig":"35"},{"size":187,"mtime":1611640997684,"results":"53","hashOfConfig":"35"},{"size":85,"mtime":1611586625214,"results":"54","hashOfConfig":"35"},{"size":629,"mtime":1612545368233,"results":"55","hashOfConfig":"35"},{"size":1826,"mtime":1612762151527,"results":"56","hashOfConfig":"35"},{"size":1266,"mtime":1612761079774,"results":"57","hashOfConfig":"35"},{"size":1248,"mtime":1612769779707,"results":"58","hashOfConfig":"35"},{"size":2287,"mtime":1612773468788,"results":"59","hashOfConfig":"35"},{"size":1650,"mtime":1612762487476,"results":"60","hashOfConfig":"35"},{"size":2202,"mtime":1612757427555,"results":"61","hashOfConfig":"35"},{"size":259,"mtime":1612262069390,"results":"62","hashOfConfig":"35"},{"size":1880,"mtime":1612756869795,"results":"63","hashOfConfig":"35"},{"size":194,"mtime":1612452821401,"results":"64","hashOfConfig":"35"},{"size":152,"mtime":1612531377941,"results":"65","hashOfConfig":"35"},{"size":2609,"mtime":1612768483433,"results":"66","hashOfConfig":"35"},{"size":869,"mtime":1612773697420,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"qf0wnc",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\index.tsx",[],["141","142"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\App.tsx",[],["143","144"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\FrontPage.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\rootReducers.ts",[],["145","146"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\store.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\sagas\\sagas.ts",["147"],"import { all, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\n// import axios from \"axios\";\r\nimport * as type from \"../actions/types\";\r\n// const port = \"https://mernstackblogappsaviersl.herokuapp.com\";\r\n// const port = \"https://mernstackblogappsaviersl.herokuapp.com\";\r\nconst port = \"http://localhost:5000\";\r\n//login\r\nconst logInData = async (email: string, password: string) => {\r\n  const body = { email, password };\r\n  console.log(body);\r\n  const token = await fetch(`${port}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  })\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  return token;\r\n};\r\nfunction* logInSaga(action: any) {\r\n  const { email, password } = action.payload;\r\n  try {\r\n    const res = yield logInData(email, password);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.LOG_IN_FAILED, payload: res });\r\n    }\r\n    console.log(res);\r\n    return yield put({ type: type.LOG_IN_SUCCESS, payload: res.token });\r\n  } catch (error) {\r\n    yield put({ type: type.LOG_IN_FAILED, payload: error });\r\n  }\r\n}\r\n\r\nfunction* watchLogInSaga() {\r\n  yield takeEvery(type.LOG_IN_SAGA, logInSaga);\r\n}\r\n\r\n//register\r\nconst registerData = async (name: string, email: string, password: string) => {\r\n  const body = { name, email, password };\r\n  const content = {\r\n    method: \"POST\",\r\n    headers: { \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  };\r\n  const token = await fetch(`${port}/users/register`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(token);\r\n  return token;\r\n};\r\nfunction* registerDataSaga(action: any) {\r\n  const { name, email, password } = action.payload;\r\n  try {\r\n    const res = yield registerData(name, email, password);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.REGISTER_FAILED, payload: res });\r\n    }\r\n    return yield put({ type: type.REGISTER_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.REGISTER_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchrRgisterDataSaga() {\r\n  yield takeEvery(type.REGISTER_SAGA, registerDataSaga);\r\n}\r\n\r\n//BLOG POST\r\nconst blogPostData = async (\r\n  title: string,\r\n  blogContent: string,\r\n  img: File,\r\n  token: string,\r\n  imgType: string\r\n) => {\r\n  console.log(img);\r\n  const body = { title, blogContent, img, imgType };\r\n  const content = {\r\n    method: \"POST\",\r\n    headers: { \"x-auth-token\": token, \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  };\r\n  const data = await fetch(`${port}/post/blog-post`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(data);\r\n  return data;\r\n};\r\nfunction* blogPostSaga(action: any) {\r\n  const { title, blogContent, img, token, imgType } = action.payload;\r\n  try {\r\n    const res = yield blogPostData(title, blogContent, img, token, imgType);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.BLOGPOST_FAILED, payload: res });\r\n    }\r\n    // to turn data to image\r\n    // const ecodeDataToImage = () => {\r\n    //   if (res) {\r\n    //     const converToBase64 = (img: any) => {\r\n    //       const buffit = Buffer.from(img);\r\n    //       res.image = `${buffit}`;\r\n    //     };\r\n    //     converToBase64(res.img);\r\n    //   }\r\n    // };\r\n    // ecodeDataToImage();\r\n    yield put({ type: type.NEW_USER_POST_SUCCESS, payload: res });\r\n    return yield put({ type: type.BLOGPOST_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.BLOGPOST_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchBlogPostSaga() {\r\n  yield takeEvery(type.BLOGPOST_SAGA, blogPostSaga);\r\n}\r\n\r\n// //NEW USER POST\r\n// function* newUserPost(action: any) {\r\n//   const { blogPost } = action.payload;\r\n\r\n//   try {\r\n//     yield put({ type: type.NEW_USER_POST_SUCCESS, payload: blogPost });\r\n//   } catch (error) {\r\n//     yield put({ type: type.NEW_USER_POST_FAILED, payload: error });\r\n//   }\r\n// }\r\n// function* watchNewUserPostSaga() {\r\n//   yield takeEvery(type.NEW_USER_POST_SAGA, newUserPost);\r\n// }\r\n\r\n//GET ALL POST\r\nconst getAllPost = async () => {\r\n  const content = { method: \"GET\" };\r\n  const data = await fetch(`${port}/post/blog-posts`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getAllPostSaga() {\r\n  try {\r\n    const res = yield getAllPost();\r\n    // let newPosts: any[] = [];\r\n    // const encodeDataToImage = () => {\r\n    //   newPosts = res.map((post: any): any => {\r\n    //     if (res.length !== 0) {\r\n    //       const convertToBase64 = (image: any): any => {\r\n    //         const buffit = Buffer.from(image);\r\n    //         post.image = `${buffit}`;\r\n    //       };\r\n    //       convertToBase64(post.img.data);\r\n    //       return post;\r\n    //     }\r\n    //     return \"\";\r\n    //   });\r\n    // };\r\n    // encodeDataToImage();\r\n\r\n    return yield put({ type: type.GET_ALL_POST_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\nfunction* watchGetAllPostSaga() {\r\n  yield takeLatest(type.GET_ALL_POST_SAGA, getAllPostSaga);\r\n}\r\n\r\nconst getUserData = async (token: string) => {\r\n  const content = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/users/get-user`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\n\r\nfunction* getUserSaga(action: any) {\r\n  const { token } = action.payload;\r\n  console.log(token);\r\n  try {\r\n    const res = yield getUserData(token);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_FAILED, payload: res });\r\n    }\r\n    return yield put({ type: type.GET_USER_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.GET_USER_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchGetUserSaga() {\r\n  yield takeEvery(type.GET_USER_SAGA, getUserSaga);\r\n}\r\n\r\nfunction* removeAlertSaga() {\r\n  yield put({ type: type.ALERT_SAGA_REMOVE });\r\n}\r\nfunction* watchRemoveAlertSaga() {\r\n  yield takeEvery(type.ALERT_SAGA, removeAlertSaga);\r\n}\r\n\r\n//GET USER POSTS\r\nconst getUserPosts = async (token: string) => {\r\n  const content = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/users/user-posts`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getUserPostsSaga(action: any) {\r\n  const { token } = action.payload;\r\n  try {\r\n    const res = yield getUserPosts(token);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_POSTS_FAILED, payload: res });\r\n    }\r\n    // let newPosts: any[] = [];\r\n    // const encodeDataToImage = () => {\r\n    //   newPosts = res.map((post: any) => {\r\n    //     if (res.length !== 0) {\r\n    //       const convertToBase64 = (image: any) => {\r\n    //         const buffit = Buffer.from(image);\r\n    //         post.image = `${buffit}`;\r\n    //       };\r\n    //       convertToBase64(post.img.data);\r\n    //       return post;\r\n    //     }\r\n    //   });\r\n    // };\r\n    // encodeDataToImage();\r\n    yield put({ type: type.GET_USER_POSTS_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.GET_USER_POSTS_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchGetUserPostsSaga() {\r\n  yield takeEvery(type.GET_USER_POSTS_SAGA, getUserPostsSaga);\r\n}\r\n\r\n//GET USER POST\r\nconst getPost = async (id: string) => {\r\n  const content = { method: \"GET\" };\r\n  const data = await fetch(`${port}/post/blog-posts/${id}`, content)\r\n    .then(async (res) => {\r\n      const data = res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getPostSaga(action: any) {\r\n  const { id } = action.payload;\r\n  try {\r\n    const res = yield getPost(id);\r\n    yield put({ type: type.POST_LINK_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.POST_LINK_SUCCESS, payload: error });\r\n  }\r\n}\r\nfunction* watchGetPostSaga() {\r\n  yield takeEvery(type.POST_LINK_SAGA, getPostSaga);\r\n}\r\n\r\n//exit post\r\nfunction* exitUserPostSaga() {\r\n  yield put({ type: type.EXIT_USER_POST_SUCESS });\r\n}\r\nfunction* watchExitUserPostSaga() {\r\n  yield takeEvery(type.EXIT_USER_POST_SAGA, exitUserPostSaga);\r\n}\r\n\r\n//LOG OUT\r\nfunction* logOutSaga() {\r\n  try {\r\n    yield put({ type: type.LOG_OUT_SUCCESS });\r\n  } catch (error) {\r\n    yield put({ type: type.LOG_OUT_FAILED });\r\n  }\r\n}\r\nfunction* watchLogOutSaga() {\r\n  yield takeEvery(type.LOG_OUT_SAGA, logOutSaga);\r\n}\r\n//DELETE POST\r\nconst deleteUserPost = async (token: string, postID: string) => {\r\n  const content = {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/post/blog-post/${postID}`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* deleteUserPostSaga(action: any) {\r\n  const { postID, token } = action.payload;\r\n  try {\r\n    const res = yield deleteUserPost(token, postID);\r\n    console.log(res);\r\n\r\n    yield put({ type: type.DELETE_POST_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.DELETE_POST_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchDeleteUserPostSaga() {\r\n  yield takeEvery(type.DELETE_POST_SAGA, deleteUserPostSaga);\r\n}\r\n\r\n//REFRESH\r\nfunction* refreshSaga() {\r\n  try {\r\n    yield put({ type: type.REFRESH_SUCCESS });\r\n  } catch (error) {\r\n    yield put({ type: type.REFRESH_FAILED });\r\n  }\r\n}\r\nfunction* watchRefreshSaga() {\r\n  yield takeEvery(type.REFRESH_SAGA, refreshSaga);\r\n}\r\n\r\n//EDIT POST\r\nconst editPostData = async (token: string, postID: string) => {\r\n  const content = {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(\r\n    `${port}/post/blog-post/edit-post/${postID}`,\r\n    content\r\n  )\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* editPostSaga(action: any) {\r\n  const { token, postID } = action.payload;\r\n  try {\r\n    const res = yield editPostData(token, postID);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_POSTS_FAILED, payload: res });\r\n    }\r\n  } catch (error) {}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchLogInSaga(),\r\n    watchrRgisterDataSaga(),\r\n    watchRemoveAlertSaga(),\r\n    watchBlogPostSaga(),\r\n    watchGetAllPostSaga(),\r\n    watchGetUserSaga(),\r\n    watchGetUserPostsSaga(),\r\n    watchGetPostSaga(),\r\n    watchExitUserPostSaga(),\r\n    watchLogOutSaga(),\r\n    watchDeleteUserPostSaga(),\r\n    watchRefreshSaga(),\r\n  ]);\r\n}\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\types.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\logIn.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\post.ts",[],["148","149"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\RegisterPage.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\register.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\HomePage.tsx",["150"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\light.ts",[],["151","152"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\styles.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\dark.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\types.ts",[],["153","154"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\alert\\Alert.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\getTheme.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\alert.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\index.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\blogPost.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\BlogPosts.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\blogPosts.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\users.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\user.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\blogPost.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\UserPost.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\loader.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Nav.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\Footer.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\formLoader.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\userPost.tsx",["155","156"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\mincomponents\\editPost.tsx",["157","158"],{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"159","replacedBy":"163"},{"ruleId":"161","replacedBy":"164"},{"ruleId":"159","replacedBy":"165"},{"ruleId":"161","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":392,"column":11,"nodeType":"169","messageId":"170","endLine":392,"endColumn":23},{"ruleId":"159","replacedBy":"171"},{"ruleId":"161","replacedBy":"172"},{"ruleId":"167","severity":1,"message":"173","line":18,"column":3,"nodeType":"169","messageId":"170","endLine":18,"endColumn":17},{"ruleId":"159","replacedBy":"174"},{"ruleId":"161","replacedBy":"175"},{"ruleId":"159","replacedBy":"176"},{"ruleId":"161","replacedBy":"177"},{"ruleId":"167","severity":1,"message":"178","line":1,"column":10,"nodeType":"169","messageId":"170","endLine":1,"endColumn":19},{"ruleId":"167","severity":1,"message":"179","line":1,"column":21,"nodeType":"169","messageId":"170","endLine":1,"endColumn":29},{"ruleId":"167","severity":1,"message":"180","line":12,"column":10,"nodeType":"169","messageId":"170","endLine":12,"endColumn":18},{"ruleId":"167","severity":1,"message":"181","line":12,"column":20,"nodeType":"169","messageId":"170","endLine":12,"endColumn":31},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],["182"],["183"],["182"],["183"],"@typescript-eslint/no-unused-vars","'editPostSaga' is defined but never used.","Identifier","unusedVar",["182"],["183"],"'editPostAction' is defined but never used.",["182"],["183"],["182"],["183"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'editPost' is assigned a value but never used.","'setEditPost' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]